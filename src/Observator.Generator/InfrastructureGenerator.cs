using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Observator.Generator
{
    [Generator]
    public class InfrastructureGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for now
        }

        public void Execute(GeneratorExecutionContext context)
        {
            var (assemblyName, version) = GetAssemblyInfo(context);
            var source = GenerateInfrastructureSource(assemblyName, version);
            context.AddSource("ObservatorInfrastructure.g.cs", SourceText.From(source, Encoding.UTF8));
        }

        private (string Name, string Version) GetAssemblyInfo(GeneratorExecutionContext context)
        {
            var assemblyName = context.Compilation.AssemblyName ?? "Unknown";
            var version = "1.0.0.0";
            var versionAttr = context.Compilation.Assembly
                .GetAttributes()
                .FirstOrDefault(a => a.AttributeClass?.Name == "AssemblyVersionAttribute");
            if (versionAttr != null && versionAttr.ConstructorArguments.Length > 0)
            {
                version = versionAttr.ConstructorArguments[0].Value?.ToString() ?? version;
            }
            return (assemblyName, version);
        }

        private string GenerateInfrastructureSource(string assemblyName, string version)
        {
            return $@"
// <auto-generated />
using System.Diagnostics;
using System.Diagnostics.Metrics;
using System;

namespace System.Runtime.CompilerServices
{{
    [System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple = true)]
    public sealed class InterceptsLocationAttribute : Attribute
    {{
        public InterceptsLocationAttribute(string filePath, int line, int column) {{ }}
    }}
}}

namespace Observator.Generated
{{
    public static class ObservatorInfrastructure
    {{
        public static readonly ActivitySource ActivitySource = new ActivitySource(""{assemblyName}"", ""{version}"");
        public static readonly Meter Meter = new Meter(""{assemblyName}"", ""{version}"");
        public static string ActivitySourceName => ""{assemblyName}"";
        public static string Version => ""{version}"";
    }}

    [System.AttributeUsage(System.AttributeTargets.Method)]
    public sealed class ObservatorTraceAttribute : System.Attribute
    {{
        public LogLevel LogLevel {{ get; set; }} = LogLevel.Debug;
        public bool IncludeParameters {{ get; set; }} = false;
        public bool IncludeReturnValue {{ get; set; }} = false;
    }}

    public enum LogLevel
    {{
        Trace = 0,
        Debug = 1,
        Information = 2,
        Warning = 3,
        Error = 4,
        Critical = 5
    }}
}}
";
        }
    }
}
