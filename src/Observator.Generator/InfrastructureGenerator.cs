using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Observator.Generator
{
    [Generator]
    public class InfrastructureGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // Use the compilation provider to get assembly info
            var assemblyInfo = context.CompilationProvider.Select((compilation, _) =>
            {
                var assemblyName = compilation.AssemblyName ?? "Unknown";
                var version = "1.0.0.0";
                var versionAttr = compilation.Assembly
                    .GetAttributes()
                    .FirstOrDefault(a => a.AttributeClass?.Name == "AssemblyVersionAttribute");
                if (versionAttr != null && versionAttr.ConstructorArguments.Length > 0)
                {
                    version = versionAttr.ConstructorArguments[0].Value?.ToString() ?? version;
                }
                return (assemblyName, version);
            });

            context.RegisterSourceOutput(assemblyInfo, (spc, tuple) =>
            {
                var (assemblyName, version) = tuple;
                var source = GenerateInfrastructureSource(assemblyName, version);
                spc.AddSource("ObservatorInfrastructure.g.cs", SourceText.From(source, Encoding.UTF8));
            });
        }

        private string GenerateInfrastructureSource(string assemblyName, string version)
        {
            return $@"
// <auto-generated />
using System.Diagnostics;
using System.Diagnostics.Metrics;
using System;

namespace Observator.Generated.{assemblyName}
{{
    internal static class ObservatorInfrastructure
    {{
        public static string ActivitySourceName => ""{assemblyName}"";
        public static string Version => ""{version}"";
    }}

    [System.AttributeUsage(System.AttributeTargets.Method)]
    internal sealed class ObservatorTraceAttribute : System.Attribute
    {{
        public bool IncludeParameters {{ get; set; }} = false;
        public bool IncludeReturnValue {{ get; set; }} = false;
    }}
}}
";
        }
        // Removed ObservatorTraceAttribute definition
    }
}
